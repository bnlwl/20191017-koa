
lenovo@DESKTOP-8AGI1N1 MINGW64 /d/test/study-node
$ yarn koa
yarn run v1.12.3
warning package.json: No license field
$ node ./src/koa/server.js
Response {
_events: {},
_eventsCount: 0,
_maxListeners: undefined,
res:
IncomingMessage {
_readableState:
ReadableState {
objectMode: false,
highWaterMark: 16384,
buffer: BufferList { head: null, tail: null, length: 0 },
length: 0,
pipes: null,
pipesCount: 0,
flowing: false,
ended: true,
endEmitted: true,
reading: false,
sync: false,
needReadable: false,
emittedReadable: false,
readableListening: false,
resumeScheduled: false,
emitClose: true,
destroyed: false,
defaultEncoding: 'utf8',
awaitDrain: 0,
readingMore: false,
decoder: null,
encoding: null },
readable: false,
_events:
{ end: [Function: responseOnEnd],
error: [Array],
close: [Function: bound emit] },
_eventsCount: 3,
_maxListeners: undefined,
socket:
TLSSocket {
_tlsOptions: [Object],
_secureEstablished: true,
_securePending: false,
_newSessionPending: false,
_controlReleased: true,
_SNICallback: null,
servername: 'dvajs.com',
alpnProtocol: false,
authorized: true,
authorizationError: null,
encrypted: true,
_events: [Object],
_eventsCount: 7,
connecting: false,
_hadError: false,
_handle: null,
_parent: null,
_host: 'dvajs.com',
_readableState: [ReadableState],
readable: false,
_maxListeners: undefined,
_writableState: [WritableState],
writable: false,
allowHalfOpen: false,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: undefined,
_server: null,
ssl: null,
_requestCert: true,
_rejectUnauthorized: true,
parser: null,
_httpMessage: [ClientRequest],
write: [Function: writeAfterFIN],
[Symbol(res)]: null,
[Symbol(asyncId)]: 37,
[Symbol(lastWriteQueueSize)]: 0,
[Symbol(timeout)]: null,
[Symbol(kBytesRead)]: 7289,
[Symbol(kBytesWritten)]: 147,
[Symbol(connect-options)]: [Object] },
connection:
TLSSocket {
_tlsOptions: [Object],
_secureEstablished: true,
_securePending: false,
_newSessionPending: false,
_controlReleased: true,
_SNICallback: null,
servername: 'dvajs.com',
alpnProtocol: false,
authorized: true,
authorizationError: null,
encrypted: true,
_events: [Object],
_eventsCount: 7,
connecting: false,
_hadError: false,
_handle: null,
_parent: null,
_host: 'dvajs.com',
_readableState: [ReadableState],
readable: false,
_maxListeners: undefined,
_writableState: [WritableState],
writable: false,
allowHalfOpen: false,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: undefined,
_server: null,
ssl: null,
_requestCert: true,
_rejectUnauthorized: true,
parser: null,
_httpMessage: [ClientRequest],
write: [Function: writeAfterFIN],
[Symbol(res)]: null,
[Symbol(asyncId)]: 37,
[Symbol(lastWriteQueueSize)]: 0,
[Symbol(timeout)]: null,
[Symbol(kBytesRead)]: 7289,
[Symbol(kBytesWritten)]: 147,
[Symbol(connect-options)]: [Object] },
httpVersionMajor: 1,
httpVersionMinor: 1,
httpVersion: '1.1',
complete: true,
headers:
{ date: 'Wed, 27 Feb 2019 03:06:41 GMT',
'content-type': 'text/html; charset=UTF-8',
'transfer-encoding': 'chunked',
connection: 'close',
'x-powered-by': 'Express',
'cache-control': 'public, max-age=60',
'last-modified': 'Thu, 29 Nov 2018 23:52:39 GMT',
etag: 'W/"a8ca-16761e38158"',
'x-now-trace': 'sfo1',
server: 'now',
now: '1',
'x-now-id': 'z42vq-1551236801856-dThyse6I4y04O7TGNbn3ai6e',
'x-now-instance': '2590811159',
'content-encoding': 'gzip' },
rawHeaders:
[ 'Date',
'Wed, 27 Feb 2019 03:06:41 GMT',
'Content-Type',
'text/html; charset=UTF-8',
'Transfer-Encoding',
'chunked',
'Connection',
'close',
'X-Powered-By',
'Express',
'Cache-Control',
'public, max-age=60',
'Last-Modified',
'Thu, 29 Nov 2018 23:52:39 GMT',
'ETag',
'W/"a8ca-16761e38158"',
'x-now-trace',
'sfo1',
'server',
'now',
'now',
'1',
'X-Now-Id',
'z42vq-1551236801856-dThyse6I4y04O7TGNbn3ai6e',
'X-Now-Instance',
'2590811159',
'Content-Encoding',
'gzip' ],
trailers: {},
rawTrailers: [],
aborted: false,
upgrade: false,
url: '',
method: null,
statusCode: 200,
statusMessage: 'OK',
client:
TLSSocket {
_tlsOptions: [Object],
_secureEstablished: true,
_securePending: false,
_newSessionPending: false,
_controlReleased: true,
_SNICallback: null,
servername: 'dvajs.com',
alpnProtocol: false,
authorized: true,
authorizationError: null,
encrypted: true,
_events: [Object],
_eventsCount: 7,
connecting: false,
_hadError: false,
_handle: null,
_parent: null,
_host: 'dvajs.com',
_readableState: [ReadableState],
readable: false,
_maxListeners: undefined,
_writableState: [WritableState],
writable: false,
allowHalfOpen: false,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: undefined,
_server: null,
ssl: null,
_requestCert: true,
_rejectUnauthorized: true,
parser: null,
_httpMessage: [ClientRequest],
write: [Function: writeAfterFIN],
[Symbol(res)]: null,
[Symbol(asyncId)]: 37,
[Symbol(lastWriteQueueSize)]: 0,
[Symbol(timeout)]: null,
[Symbol(kBytesRead)]: 7289,
[Symbol(kBytesWritten)]: 147,
[Symbol(connect-options)]: [Object] },
_consuming: true,
_dumped: false,
req:
ClientRequest {
_events: [Object],
_eventsCount: 3,
_maxListeners: undefined,
output: [],
outputEncodings: [],
outputCallbacks: [],
outputSize: 0,
writable: true,
_last: true,
chunkedEncoding: false,
shouldKeepAlive: false,
useChunkedEncodingByDefault: false,
sendDate: false,
_removedConnection: false,
_removedContLen: false,
_removedTE: false,
_contentLength: 0,
_hasBody: true,
_trailer: '',
finished: true,
_headerSent: true,
socket: [TLSSocket],
connection: [TLSSocket],
_header:
'GET /guide/introduce-class.html HTTP/1.1\r\nHost: dvajs.com\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/4.1.0\r\nConnection: close\r\n\r\n',
_onPendingData: [Function: noopPendingOutput],
agent: [Agent],
socketPath: undefined,
timeout: undefined,
method: 'GET',
path: '/guide/introduce-class.html',
_ended: true,
res: [Circular],
aborted: undefined,
timeoutCb: null,
upgradeOrConnect: false,
parser: null,
maxHeadersCount: null,
[Symbol(isCorked)]: false,
[Symbol(outHeadersKey)]: [Object] },
setEncoding: [Function],
on: [Function],
text:
'<!DOCTYPE html>\n<html lang="en-US">\n  <head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width,initial-scale=1">\n   <title>入门课 | DvaJS</title>\n    <meta name="description" content="React and redux based, lightweight and elm-style framework.">\n    \n    \n    <link rel="preload" href="/assets/css/0.styles.b8709ccd.css" as="style"><link rel="preload"href="/assets/js/app.dc321897.js" as="script"><link rel="preload" href="/assets/js/14.e84ae03a.js" as="script"><link rel="prefetch" href="/assets/js/10.5135f8ee.js"><link rel="prefetch" href="/assets/js/11.e8b382d8.js"><link rel="prefetch"href="/assets/js/12.386d0bf0.js"><link rel="prefetch" href="/assets/js/13.6bd02bb1.js"><link rel="prefetch" href="/assets/js/15.8efcad4a.js"><link rel="prefetch" href="/assets/js/16.d788ea92.js"><link rel="prefetch" href="/assets/js/17.4425fd00.js"><link rel="prefetch" href="/assets/js/2.0629f971.js"><link rel="prefetch" href="/assets/js/3.aeb3be87.js"><link rel="prefetch" href="/assets/js/4.76994986.js"><link rel="prefetch" href="/assets/js/5.5da63f73.js"><link rel="prefetch" href="/assets/js/6.ad6d1a78.js"><link rel="prefetch" href="/assets/js/7.1dfa7f05.js"><link rel="prefetch" href="/assets/js/8.34844fc7.js"><link rel="prefetch" href="/assets/js/9.099d0481.js">\n    <link rel="stylesheet" href="/assets/css/0.styles.b8709ccd.css">\n  </head>\n  <body>\n    <div id="app" data-server-rendered="true"><div class="theme-container"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c06.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.37312-12 12z"></path></svg></div> <a href="/" class="home-link router-link-active"><!----> <span class="site-name">DvaJS</span></a> <div class="links" style="max-width:nullpx;"><div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div> <nav class="nav-links can-hide"><div class="nav-item"><a href="/guide/" class="nav-link router-link-active">指南</a></div><div class="nav-item"><a href="/api/" class="nav-link">API</a></div><div class="nav-item"><a href="/knowledgemap/" class="nav-link">知识地图</a></div><div class="nav-item"><a href="https://github.com/dvajs/dva/releases" target="_blank" rel="noopener noreferrer" class="nav-link external">\n  发布日志\n  <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></div> <a href="https://github.com/dvajs/dva" target="_blank" rel="noopener noreferrer" class="repo-link">\n    GitHub\n   <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></nav></div></header> <div class="sidebar-mask"></div> <div class="sidebar"><nav class="nav-links"><div class="nav-item"><a href="/guide/" class="nav-link router-link-active">指南</a></div><div class="nav-item"><a href="/api/" class="nav-link">API</a></div><div class="nav-item"><a href="/knowledgemap/" class="nav-link">知识地图</a></div><div class="nav-item"><a href="https://github.com/dvajs/dva/releases" target="_blank" rel="noopener noreferrer" class="nav-link external">\n  发布日志\n  <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></div> <a href="https://github.com/dvajs/dva" target="_blank" rel="noopener noreferrer" class="repo-link">\n    GitHub\n    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></nav>  <ul class="sidebar-links"><li><div class="sidebar-group first"><p class="sidebar-heading open"><span>指南</span> <!----></p> <ul class="sidebar-group-items"><li><a href="/guide/" class="sidebar-link">介绍</a></li><li><a href="/guide/getting-started.html" class="sidebar-link">快速上手</a></li><li><a href="/guide/examples-and-boilerplates.html" class="sidebar-link">例子和脚手架</a></li><li><a href="/guide/concepts.html" class="sidebar-link">Dva 概念</a></li><li><a href="/guide/introduce-class.html" class="active sidebar-link">入门课</a><ul class="sidebar-sub-headers"><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#react-没有解决的问题" class="sidebar-link">React 没有解决的问题</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#通信问题" class="sidebar-link">通信问题</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#组件通信的例子" class="sidebar-link">组件通信的例子</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流问题" class="sidebar-link">数据流问题</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#目前最流行的数据流方案" class="sidebar-link">目前最流行的数据流方案</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dva-是什么" class="sidebar-link">dva 是什么</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dva-应用的最简结构" class="sidebar-link">dva 应用的最简结构</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流图" class="sidebar-link">数据流图</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#核心概念" class="sidebar-link">核心概念</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#state-和-view" class="sidebar-link">State 和 View</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#action" class="sidebar-link">Action</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#connect-方法" class="sidebar-link">connect 方法</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dispatch-方法" class="sidebar-link">dispatch 方法</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dva-应用的最简结构（带-model" class="sidebar-link">dva 应用的最简结构（带 model)</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流图-1" class="sidebar-link">数据流图 1</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流图-2" class="sidebar-link">数据流图 2</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#app-model" class="sidebar-link">app.model</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#model-对象的例子" class="sidebar-link">Model 对象的例子</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#model-对象的属性" class="sidebar-link">Model 对象的属性</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#reducer" class="sidebar-link">Reducer</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#effect" class="sidebar-link">Effect</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#generator-函数" class="sidebar-link">Generator 函数</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#call-和-put" class="sidebar-link">call 和 put</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#课堂实战" class="sidebar-link">课堂实战</a></li></ul></li></ul></div></li><li><div class="sidebar-group"><p class="sidebar-heading"><span>社区</span> <!----></p> <ul class="sidebar-group-items"><li><a href="/guide/fig-show.html" class="sidebar-link">Dva 图解</a></li><li><a href="/guide/develop-complex-spa.html" class="sidebar-link">使用 Dva 开发复杂 SPA</a></li><li><a href="/guide/source-code-explore.html" class="sidebar-link">Dva 源码解析</a></li></ul></div></li></ul> </div> <div class="page"> <div class="content"><h1 id="入门课"><a href="#入门课" aria-hidden="true" class="header-anchor">#</a> 入门课</h1> <div class="tip custom-block"><p class="custom-block-title">TIP</p> <p>内容来自之前为内部同学准备的入门课。</p></div> <h2 id="react-没有解决的问题"><a href="#react-没有解决的问题" aria-hidden="true" class="header-anchor">#</a> React 没有解决的问题</h2> <p>React 本身只是一个 DOM 的抽象层，使用组件构建虚拟 DOM。</p> <p>如果开发大应用，还需要解决一个问题。</p> <ul><li>通信：组件之间如何通信？</li> <li>数据流：数据如何和视图串联起来？路由和数据如何绑定？如何编写异步逻辑？等等</li></ul> <h2 id="通信问题"><a href="#通信问题" aria-hidden="true" class="header-anchor">#</a> 通信问题</h2> <p>组件会发生三种通信。</p> <ul><li>向子组件发消息</li> <li>向父组件发消息</li> <li>向其他组件发消息</li></ul> <p>React 只提供了一种通信手段：传参。对于大应用，很不方便。</p> <h2 id="组件通信的例子"><a href="#组件通信的例子" aria-hidden="true" class="header-anchor">#</a> 组件通信的例子</h2> <h3 id="步骤1"><a href="#步骤1" aria-hidden="true" class="header-anchor">#</a> 步骤1</h3> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>input<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>Son<span class="token operator">/</span><span class="token operator">&gt;</span>\n     <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>这里显示 Son 组件的内容<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Father<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> mountNode<span class="tokenpunctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>看这个例子，想一想父组件如何拿到子组件的值。</p> <h3 id="步骤2"><a href="#步骤2" aria-hidden="true" class="header-anchor">#</a> 步骤2</h3> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>onChange<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      son<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">changeHandler</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      son<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>Son onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>这里显示 Son 组件的内容：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>son<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Father<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>看下这个例子，看懂源码，理解子组件如何通过父组件传入的函数，将自己的值再传回父组件。</p> <h2 id="数据流问题"><a href="#数据流问题" aria-hidden="true" class="header-anchor">#</a> 数据流问题</h2> <p>目前流行的数据流方案有：</p> <ul><li>Flux，单向数据流方案，以 <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener noreferrer">Redux<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 为代表</li> <li>Reactive，响应式数据流方案，以 <a href="https://github.com/mobxjs/mobx" target="_blank" rel="noopener noreferrer">Mobx<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 为代表</li> <li>其他，比如 rxjs 等</li></ul> <p>到底哪一种架构最合适 React ？</p> <h2 id="目前最流行的数据流方案"><a href="#目前最流行的数据流方案" aria-hidden="true" class="header-anchor">#</a> 目前最流行的数据流方案</h2> <p>截止 2017.1，最流行的社区 React 应用架构方案如下。</p> <ul><li>路由： <a href="https://github.com/ReactTraining/react-router/tree/v2.8.1" target="_blank" rel="noopener noreferrer">React-Router<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li> <li>架构： <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener noreferrer">Redux<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li> <li>异步操作： <a href="https://github.com/yelouafi/redux-saga" target="_blank" rel="noopener noreferrer">Redux-saga<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li></ul> <p>缺点：要引入多个库，项目结构复杂。</p> <h2 id="dva-是什么"><a href="#dva-是什么" aria-hidden="true" class="header-anchor">#</a> dva 是什么</h2> <p>dva 是体验技术部开发的 React 应用框架，将上面三个 React 工具库包装在一起，简化了 API，让开发 React 应用更加方便和快捷。</p> <p>dva = React-Router + Redux + Redux-saga</p> <h2 id="dva-应用的最简结构"><a href="#dva-应用的最简结构" aria-hidden="true" class="header-anchor">#</a> dva 应用的最简结构</h2> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">import</span> dva <span class="token keyword">from</span> <span class="token string">\'dva\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <spanclass="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Hello dva<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建应用</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="tokenpunctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 注册视图</span>\napp<span class="token punctuation">.</span><spanclass="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 启动应用</span>\napp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="数据流图"><a href="#数据流图" aria-hidden="true" class="header-anchor">#</a> 数据流图</h2> <img src="https://zos.alipayobjects.com/rmsportal/hUFIivoOFjVmwNXjjfPE.png" width="460" height="290"> <h2 id="核心概念"><a href="#核心概念" aria-hidden="true" class="header-anchor">#</a> 核心概念</h2> <ul><li>State：一个对象，保存整个应用状态</li> <li>View：React 组件构成的视图层</li> <li>Action：一个对象，描述事件</li> <li>connect 方法：一个函数，绑定 State 到 View</li> <li>dispatch 方法：一个函数，发送 Action 到 State</li></ul> <h2 id="state-和-view"><a href="#state-和-view" aria-hidden="true" class="header-anchor">#</a> State 和 View</h2> <p>State 是储存数据的地方，收到 Action 以后，会更新数据。</p> <p>View 就是 React 组件构成的 UI 层，从 State 取数据后，渲染成 HTML 代码。只要 State 有变化，View 就会自动更新。</p> <h2 id="action"><a href="#action" aria-hidden="true" class="header-anchor">#</a> Action</h2> <p>Action 是用来描述 UI 层事件的一个对象。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'click-submit-button\'</span><span class="tokenpunctuation">,</span>\n  payload<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>data\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="connect-方法"><a href="#connect-方法" aria-hidden="true" class="header-anchor">#</a> connect 方法</h2> <p>connect 是一个函数，绑定 State 到 View。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'dva\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> todos<span class="token punctuation">:</span> state<span class="token punctuation">.</span>todos <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>connect 方法返回的也是一个 React 组件，通常称为容器组件。因为它是原始 UI 组件的容器，即在外面包了一层 State。</p> <p>connect 方法传入的第一个参数是 mapStateToProps  函数，mapStateToProps 函数会返回一个对象，用于建立 State 到 Props 的映射关系。</p> <h2 id="dispatch-方法"><a href="#dispatch-方法" aria-hidden="true" class="header-anchor">#</a> dispatch 方法</h2> <p>dispatch 是一个函数方法，用来将 Action 发送给 State。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'click-submit-button\'</span><span class="token punctuation">,</span>\n  payload<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>data\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>dispatch 方法从哪里来？被 connect 的 Component 会自动在 props 中拥有 dispatch 方法。</p> <blockquote><p>connect 的数据从哪里来?</p></blockquote> <h2 id="dva-应用的最简结构（带-model"><a href="#dva-应用的最简结构（带-model" aria-hidden="true" class="header-anchor">#</a> dva 应用的最简结构（带 model)</h2> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// 创建应用</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 注册 Model</span>\napp<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  namespace<span class="token punctuation">:</span> <span class="token string">\'count\'</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  reducers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  effects<spanclass="token punctuation">:</span> <span class="token punctuation">{</span>\n   <span class="token operator">*</span><span class="token function">addAfter1Second</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="tokenpunctuation">,</span> put <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'add\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 注册视图</span>\napp<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>ConnectedApp <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 启动应用</span>\napp<span class="token punctuation">.</span><span class="token function">start</span><spanclass="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="数据流图-1"><a href="#数据流图-1" aria-hidden="true" class="header-anchor">#</a> 数据流图 1</h2> <img src="https://zos.alipayobjects.com/rmsportal/cyzvnIrRhJGOiLliwhcZ.png" width="450" height="380"> <h2 id="数据流图-2"><a href="#数据流图-2" aria-hidden="true" class="header-anchor">#</a> 数据流图 2</h2> <img src="https://zos.alipayobjects.com/rmsportal/pHTYrKJxQHPyJGAYOzMu.png" width="607" height="464"> <h2 id="app-model"><a href="#app-model" aria-hidden="true" class="header-anchor">#</a> app.model</h2> <p>dva 提供 app.model 这个对象，所有的应用逻辑都定义在它上面。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 新增这一行</span>\napp<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/**/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="tokenpunctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><spanclass="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="model-对象的例子"><a href="#model-对象的例子" aria-hidden="true" class="header-anchor">#</a> Model 对象的例子</h2> <div class="language-js extra-class"><pre class="language-js"><code><span class="token punctuation">{</span>\n  namespace<span class="token punctuation">:</span> <span class="token string">\'count\'</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  reducers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  effects<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">*</span><spanclass="token function">addAfter1Second</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'add\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="model-对象的属性"><a href="#model-对象的属性" aria-hidden="true" class="header-anchor">#</a> Model 对象的属性</h2> <ul><li>namespace: 当前 Model 的名称。整个应用的 State，由多个小的 Model 的 State 以 namespace 为 key 合成</li> <li>state: 该 Model 当前的状态。数据保存在这里，直接决定了视图层的输出</li> <li>reducers: Action 处理器，处理同步动作，用来算出最新的 State</li> <li>effects：Action 处理器，处理异步动作</li></ul> <h2 id="reducer"><a href="#reducer" aria-hidden="true" class="header-anchor">#</a>Reducer</h2> <p>Reducer 是 Action 处理器，用来处理同步操作，可以看做是 state 的计算器。它的作用是根据 Action，从上一个 State 算出当前 State。</p> <p>一些例子：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// count +1</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 往 [] 里添加一个新 todo</span>\n<span class="token keyword">function</span> <span class="token function">addTodo</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="tokenkeyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">,</span> action<spanclass="token punctuation">.</span>payload<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 往 { todos: [], loading: true } 里添加一个新 todo，并标记 loading 为 false</span>\n<span class="token keyword">function</span> <span class="token function">addTodo</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>state<span class="token punctuation">,</span>\n   todos<span class="token punctuation">:</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><spanclass="token punctuation">,</span>\n    loading<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="effect"><a href="#effect" aria-hidden="true" class="header-anchor">#</a> Effect</h2> <p>Action 处理器，处理异步动作，基于 Redux-saga 实现。Effect 指的是副作用。根据函数式编程，计算以外的操作都属于Effect，典型的就是 I/O 操作、数据库读写。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">addAfter1Second</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token punctuation">{</span> put<span class="token punctuation">,</span> call <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'add\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="generator-函数"><a href="#generator-函数" aria-hidden="true" class="header-anchor">#</a> Generator 函数</h2> <p>Effect 是一个 Generator 函数，内部使用 yield 关键字，标识每一步的操作（不管是异步或同步）。</p> <h2 id="call-和-put"><a href="#call-和-put" aria-hidden="true" class="header-anchor">#</a> call 和 put</h2> <p>dva提供多个 effect 函数内部的处理函数，比较常用的是 <code>call</code> 和 <code>put</code>。</p> <ul><li>call：执行异步函数</li> <li>put：发出一个 Action，类似于 dispatch</li></ul> <h2 id="课堂实战"><a href="#课堂实战" aria-hidden="true" class="header-anchor">#</a> 课堂实战</h2> <p>写一个列表，包含删除按钮，点删除按钮后延迟 1 秒执行删除。</p> <img src="https://zos.alipayobjects.com/rmsportal/qEVcuGVcKMGjlUNghHel.gif"></div> <div class="page-edit"><div class="edit-link"><a href="https://github.com/dvajs/dva/edit/master/docs/guide/introduce-class.md" target="_blank" rel="noopener noreferrer">在 GitHub 上编辑此页</a> <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></div> <div class="last-updated"><span class="prefix">Last Updated: </span> <span class="time">9/5/2018, 1:47:03 PM</span></div></div> <divclass="page-nav"><p class="inner"><span class="prev">\n        ←\n        <a href="/guide/concepts.html" class="prev">\n          Dva 概念\n        </a></span><span class="next"><a href="/guide/fig-show.html">\n          Dva 图解\n       </a>\n        →\n      </span></p></div> </div> <!----></div></div>\n    <script src="/assets/js/14.e84ae03a.js" defer></script><script src="/assets/js/app.dc321897.js" defer></script>\n  </body>\n</html>\n' },
request:
Request {
_events: { error: [Function], abort: [Function] },
_eventsCount: 2,
_maxListeners: undefined,
_enableHttp2: false,
_agent: false,
_formData: null,
method: 'GET',
url: 'https://dvajs.com/guide/introduce-class.html',
_header: { 'user-agent': 'node-superagent/4.1.0' },
header: { 'User-Agent': 'node-superagent/4.1.0' },
writable: true,
_redirects: 0,
_maxRedirects: 5,
cookies: '',
qs: {},
_query: [],
qsRaw: [],
_redirectList: [],
_streamRequest: false,
req:
ClientRequest {
_events: [Object],
_eventsCount: 3,
_maxListeners: undefined,
output: [],
outputEncodings: [],
outputCallbacks: [],
outputSize: 0,
writable: true,
_last: true,
chunkedEncoding: false,
shouldKeepAlive: false,
useChunkedEncodingByDefault: false,
sendDate: false,
_removedConnection: false,
_removedContLen: false,
_removedTE: false,
_contentLength: 0,
_hasBody: true,
_trailer: '',
finished: true,
_headerSent: true,
socket: [TLSSocket],
connection: [TLSSocket],
_header:
'GET /guide/introduce-class.html HTTP/1.1\r\nHost: dvajs.com\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/4.1.0\r\nConnection: close\r\n\r\n',
_onPendingData: [Function: noopPendingOutput],
agent: [Agent],
socketPath: undefined,
timeout: undefined,
method: 'GET',
path: '/guide/introduce-class.html',
_ended: true,
res: [IncomingMessage],
aborted: undefined,
timeoutCb: null,
upgradeOrConnect: false,
parser: null,
maxHeadersCount: null,
[Symbol(isCorked)]: false,
[Symbol(outHeadersKey)]: [Object] },
protocol: 'https:',
host: 'dvajs.com',
_endCalled: true,
_callback: [Function],
_fullfilledPromise: Promise { [Circular] },
res:
IncomingMessage {
_readableState: [ReadableState],
readable: false,
_events: [Object],
_eventsCount: 3,
_maxListeners: undefined,
socket: [TLSSocket],
connection: [TLSSocket],
httpVersionMajor: 1,
httpVersionMinor: 1,
httpVersion: '1.1',
complete: true,
headers: [Object],
rawHeaders: [Array],
trailers: {},
rawTrailers: [],
aborted: false,
upgrade: false,
url: '',
method: null,
statusCode: 200,
statusMessage: 'OK',
client: [TLSSocket],
_consuming: true,
_dumped: false,
req: [ClientRequest],
setEncoding: [Function],
on: [Function],
text:
'<!DOCTYPE html>\n<html lang="en-US">\n  <head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width,initial-scale=1">\n   <title>入门课 | DvaJS</title>\n    <meta name="description" content="React and redux based, lightweight and elm-style framework.">\n    \n    \n    <link rel="preload" href="/assets/css/0.styles.b8709ccd.css" as="style"><link rel="preload" href="/assets/js/app.dc321897.js" as="script"><link rel="preload" href="/assets/js/14.e84ae03a.js" as="script"><link rel="prefetch" href="/assets/js/10.5135f8ee.js"><link rel="prefetch" href="/assets/js/11.e8b382d8.js"><link rel="prefetch" href="/assets/js/12.386d0bf0.js"><link rel="prefetch" href="/assets/js/13.6bd02bb1.js"><link rel="prefetch" href="/assets/js/15.8efcad4a.js"><link rel="prefetch" href="/assets/js/16.d788ea92.js"><link rel="prefetch" href="/assets/js/17.4425fd00.js"><link rel="prefetch" href="/assets/js/2.0629f971.js"><link rel="prefetch" href="/assets/js/3.aeb3be87.js"><link rel="prefetch" href="/assets/js/4.76994986.js"><link rel="prefetch" href="/assets/js/5.5da63f73.js"><link rel="prefetch" href="/assets/js/6.ad6d1a78.js"><link rel="prefetch" href="/assets/js/7.1dfa7f05.js"><link rel="prefetch" href="/assets/js/8.34844fc7.js"><link rel="prefetch" href="/assets/js/9.099d0481.js">\n    <link rel="stylesheet" href="/assets/css/0.styles.b8709ccd.css">\n  </head>\n  <body>\n    <div id="app" data-server-rendered="true"><div class="theme-container"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="/" class="home-link router-link-active"><!----> <span class="site-name">DvaJS</span></a> <div class="links" style="max-width:nullpx;"><div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div> <nav class="nav-links can-hide"><div class="nav-item"><a href="/guide/" class="nav-link router-link-active">指南</a></div><div class="nav-item"><a href="/api/" class="nav-link">API</a></div><div class="nav-item"><a href="/knowledgemap/" class="nav-link">知识地图</a></div><div class="nav-item"><a href="https://github.com/dvajs/dva/releases" target="_blank" rel="noopener noreferrer" class="nav-link external">\n  发布日志\n  <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.962.8,22.9 71.5,22.9"></polygon></svg></a></div> <a href="https://github.com/dvajs/dva" target="_blank" rel="noopener noreferrer" class="repo-link">\n    GitHub\n    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px"viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></nav></div></header> <div class="sidebar-mask"></div> <div class="sidebar"><nav class="nav-links"><div class="nav-item"><a href="/guide/" class="nav-link router-link-active">指南</a></div><div class="nav-item"><a href="/api/" class="nav-link">API</a></div><div class="nav-item"><a href="/knowledgemap/" class="nav-link">知识地图</a></div><div class="nav-item"><a href="https://github.com/dvajs/dva/releases" target="_blank" rel="noopener noreferrer" class="nav-link external">\n  发布日志\n  <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100"width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></div> <a href="https://github.com/dvajs/dva" target="_blank" rel="noopener noreferrer" class="repo-link">\n    GitHub\n    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0100 100" width="15" height="15" class="icon outbound"><path fill="currentColor"d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></nav>  <ul class="sidebar-links"><li><divclass="sidebar-group first"><p class="sidebar-heading open"><span>指南</span> <!----></p> <ul class="sidebar-group-items"><li><a href="/guide/" class="sidebar-link">介绍</a></li><li><a href="/guide/getting-started.html" class="sidebar-link">快速上手</a></li><li><a href="/guide/examples-and-boilerplates.html" class="sidebar-link">例子和脚手架</a></li><li><a href="/guide/concepts.html" class="sidebar-link">Dva 概念</a></li><li><a href="/guide/introduce-class.html" class="active sidebar-link">入门课</a><ul class="sidebar-sub-headers"><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#react-没有解决的问题" class="sidebar-link">React 没有解决的问题</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#通信问题" class="sidebar-link">通信问题</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#组件通信的例子" class="sidebar-link">组件通信的例子</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流问题" class="sidebar-link">数据流问题</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#目前最流行的数据流方案" class="sidebar-link">目前最流行的数据流方案</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dva-是什么" class="sidebar-link">dva 是什么</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dva-应用的最简结构" class="sidebar-link">dva 应用的最简结构</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流图"class="sidebar-link">数据流图</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#核心概念" class="sidebar-link">核心概念</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#state-和-view" class="sidebar-link">State 和 View</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#action" class="sidebar-link">Action</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#connect-方法" class="sidebar-link">connect 方法</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dispatch-方法" class="sidebar-link">dispatch 方法</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dva-应用的最简结构（带-model" class="sidebar-link">dva 应用的最简结构（带 model)</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流图-1" class="sidebar-link">数据流图 1</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流图-2" class="sidebar-link">数据流图 2</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#app-model" class="sidebar-link">app.model</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#model-对象的例子" class="sidebar-link">Model 对象的例子</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#model-对象的属性" class="sidebar-link">Model 对象的属性</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#reducer" class="sidebar-link">Reducer</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#effect" class="sidebar-link">Effect</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#generator-函数" class="sidebar-link">Generator 函数</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#call-和-put" class="sidebar-link">call 和 put</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#课堂实战" class="sidebar-link">课堂实战</a></li></ul></li></ul></div></li><li><div class="sidebar-group"><p class="sidebar-heading"><span>社区</span> <!----></p> <ul class="sidebar-group-items"><li><a href="/guide/fig-show.html" class="sidebar-link">Dva 图解</a></li><li><a href="/guide/develop-complex-spa.html" class="sidebar-link">使用 Dva 开发复杂 SPA</a></li><li><a href="/guide/source-code-explore.html" class="sidebar-link">Dva源码解析</a></li></ul></div></li></ul> </div> <div class="page"> <div class="content"><h1 id="入门课"><a href="#入门课" aria-hidden="true" class="header-anchor">#</a> 入门课</h1> <div class="tip custom-block"><p class="custom-block-title">TIP</p> <p>内容来自之前为内部同学准备的入门课。</p></div> <h2 id="react-没有解决的问题"><a href="#react-没有解决的问题" aria-hidden="true" class="header-anchor">#</a> React 没有解决的问题</h2> <p>React 本身只是一个 DOM 的抽象层，使用组件构建虚拟 DOM。</p> <p>如果开发大应用，还需要解决一个问题。</p> <ul><li>通信：组件之间如何通信？</li> <li>数据流：数据如何和视图串联起来？路由和数据如何绑定？如何编写异步逻辑？等等</li></ul> <h2 id="通信问题"><a href="#通信问题" aria-hidden="true" class="header-anchor">#</a> 通信问题</h2> <p>组件会发生三种通信。</p> <ul><li>向子组件发消息</li> <li>向父组件发消息</li> <li>向其他组件发消息</li></ul> <p>React 只提供了一种通信手段：传参。对于大应用，很不方便。</p> <h2 id="组件通信的例子"><a href="#组件通信的例子" aria-hidden="true" class="header-anchor">#</a> 组件通信的例子</h2> <h3 id="步骤1"><a href="#步骤1" aria-hidden="true" class="header-anchor">#</a> 步骤1</h3> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>input<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="tokenpunctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <spanclass="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>Son<span class="token operator">/</span><span class="token operator">&gt;</span>\n     <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>这里显示 Son 组件的内容<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Father<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>看这个例子，想一想父组件如何拿到子组件的值。</p> <h3 id="步骤2"><a href="#步骤2" aria-hidden="true" class="header-anchor">#</a> 步骤2</h3> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>onChange<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      son<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">changeHandler</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      son<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>Son onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>这里显示 Son 组件的内容：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>son<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Father<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>看下这个例子，看懂源码，理解子组件如何通过父组件传入的函数，将自己的值再传回父组件。</p> <h2 id="数据流问题"><a href="#数据流问题" aria-hidden="true" class="header-anchor">#</a> 数据流问题</h2> <p>目前流行的数据流方案有：</p> <ul><li>Flux，单向数据流方案，以 <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener noreferrer">Redux<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 为代表</li> <li>Reactive，响应式数据流方案，以 <a href="https://github.com/mobxjs/mobx" target="_blank" rel="noopener noreferrer">Mobx<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 为代表</li> <li>其他，比如 rxjs 等</li></ul> <p>到底哪一种架构最合适 React ？</p> <h2 id="目前最流行的数据流方案"><a href="#目前最流行的数据流方案" aria-hidden="true" class="header-anchor">#</a> 目前最流行的数据流方案</h2> <p>截止 2017.1，最流行的社区 React 应用架构方案如下。</p> <ul><li>路由： <a href="https://github.com/ReactTraining/react-router/tree/v2.8.1" target="_blank" rel="noopener noreferrer">React-Router<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li> <li>架构： <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener noreferrer">Redux<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li> <li>异步操作： <a href="https://github.com/yelouafi/redux-saga" target="_blank" rel="noopener noreferrer">Redux-saga<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li></ul> <p>缺点：要引入多个库，项目结构复杂。</p> <h2 id="dva-是什么"><a href="#dva-是什么" aria-hidden="true" class="header-anchor">#</a> dva 是什么</h2> <p>dva 是体验技术部开发的 React 应用框架，将上面三个 React 工具库包装在一起，简化了 API，让开发 React 应用更加方便和快捷。</p> <p>dva = React-Router + Redux + Redux-saga</p> <h2 id="dva-应用的最简结构"><a href="#dva-应用的最简结构" aria-hidden="true" class="header-anchor">#</a> dva 应用的最简结构</h2> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">import</span> dva <span class="token keyword">from</span> <span class="token string">\'dva\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <spanclass="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Hello dva<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建应用</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="tokenpunctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 注册视图</span>\napp<span class="token punctuation">.</span><spanclass="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 启动应用</span>\napp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="数据流图"><a href="#数据流图" aria-hidden="true" class="header-anchor">#</a> 数据流图</h2> <img src="https://zos.alipayobjects.com/rmsportal/hUFIivoOFjVmwNXjjfPE.png" width="460" height="290"> <h2 id="核心概念"><a href="#核心概念" aria-hidden="true" class="header-anchor">#</a> 核心概念</h2> <ul><li>State：一个对象，保存整个应用状态</li> <li>View：React 组件构成的视图层</li> <li>Action：一个对象，描述事件</li> <li>connect 方法：一个函数，绑定 State 到 View</li> <li>dispatch 方法：一个函数，发送 Action 到 State</li></ul> <h2 id="state-和-view"><a href="#state-和-view" aria-hidden="true" class="header-anchor">#</a> State 和 View</h2> <p>State 是储存数据的地方，收到 Action 以后，会更新数据。</p> <p>View 就是 React 组件构成的 UI 层，从 State 取数据后，渲染成 HTML 代码。只要 State 有变化，View 就会自动更新。</p> <h2 id="action"><a href="#action" aria-hidden="true" class="header-anchor">#</a> Action</h2> <p>Action 是用来描述 UI 层事件的一个对象。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'click-submit-button\'</span><span class="tokenpunctuation">,</span>\n  payload<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>data\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="connect-方法"><a href="#connect-方法" aria-hidden="true" class="header-anchor">#</a> connect 方法</h2> <p>connect 是一个函数，绑定 State 到 View。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'dva\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> todos<span class="token punctuation">:</span> state<span class="token punctuation">.</span>todos <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>connect 方法返回的也是一个 React 组件，通常称为容器组件。因为它是原始 UI 组件的容器，即在外面包了一层 State。</p> <p>connect 方法传入的第一个参数是 mapStateToProps  函数，mapStateToProps 函数会返回一个对象，用于建立 State 到 Props 的映射关系。</p> <h2 id="dispatch-方法"><a href="#dispatch-方法" aria-hidden="true" class="header-anchor">#</a> dispatch 方法</h2> <p>dispatch 是一个函数方法，用来将 Action 发送给 State。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'click-submit-button\'</span><span class="token punctuation">,</span>\n  payload<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>data\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>dispatch 方法从哪里来？被 connect 的 Component 会自动在 props 中拥有 dispatch 方法。</p> <blockquote><p>connect 的数据从哪里来?</p></blockquote> <h2 id="dva-应用的最简结构（带-model"><a href="#dva-应用的最简结构（带-model" aria-hidden="true" class="header-anchor">#</a> dva 应用的最简结构（带 model)</h2> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// 创建应用</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 注册 Model</span>\napp<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  namespace<span class="token punctuation">:</span> <span class="token string">\'count\'</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  reducers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  effects<spanclass="token punctuation">:</span> <span class="token punctuation">{</span>\n   <span class="token operator">*</span><span class="token function">addAfter1Second</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="tokenpunctuation">,</span> put <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'add\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 注册视图</span>\napp<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>ConnectedApp <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 启动应用</span>\napp<span class="token punctuation">.</span><span class="token function">start</span><spanclass="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="数据流图-1"><a href="#数据流图-1" aria-hidden="true" class="header-anchor">#</a> 数据流图 1</h2> <img src="https://zos.alipayobjects.com/rmsportal/cyzvnIrRhJGOiLliwhcZ.png" width="450" height="380"> <h2 id="数据流图-2"><a href="#数据流图-2" aria-hidden="true" class="header-anchor">#</a> 数据流图 2</h2> <img src="https://zos.alipayobjects.com/rmsportal/pHTYrKJxQHPyJGAYOzMu.png" width="607" height="464"> <h2 id="app-model"><a href="#app-model" aria-hidden="true" class="header-anchor">#</a> app.model</h2> <p>dva 提供 app.model 这个对象，所有的应用逻辑都定义在它上面。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 新增这一行</span>\napp<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/**/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="tokenpunctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><spanclass="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="model-对象的例子"><a href="#model-对象的例子" aria-hidden="true" class="header-anchor">#</a> Model 对象的例子</h2> <div class="language-js extra-class"><pre class="language-js"><code><span class="token punctuation">{</span>\n  namespace<span class="token punctuation">:</span> <span class="token string">\'count\'</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  reducers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  effects<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">*</span><spanclass="token function">addAfter1Second</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'add\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="model-对象的属性"><a href="#model-对象的属性" aria-hidden="true" class="header-anchor">#</a> Model 对象的属性</h2> <ul><li>namespace: 当前 Model 的名称。整个应用的 State，由多个小的 Model 的 State 以 namespace 为 key 合成</li> <li>state: 该 Model 当前的状态。数据保存在这里，直接决定了视图层的输出</li> <li>reducers: Action 处理器，处理同步动作，用来算出最新的 State</li> <li>effects：Action 处理器，处理异步动作</li></ul> <h2 id="reducer"><a href="#reducer" aria-hidden="true" class="header-anchor">#</a>Reducer</h2> <p>Reducer 是 Action 处理器，用来处理同步操作，可以看做是 state 的计算器。它的作用是根据 Action，从上一个 State 算出当前 State。</p> <p>一些例子：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// count +1</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 往 [] 里添加一个新 todo</span>\n<span class="token keyword">function</span> <span class="token function">addTodo</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="tokenkeyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">,</span> action<spanclass="token punctuation">.</span>payload<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 往 { todos: [], loading: true } 里添加一个新 todo，并标记 loading 为 false</span>\n<span class="token keyword">function</span> <span class="token function">addTodo</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>state<span class="token punctuation">,</span>\n   todos<span class="token punctuation">:</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><spanclass="token punctuation">,</span>\n    loading<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="effect"><a href="#effect" aria-hidden="true" class="header-anchor">#</a> Effect</h2> <p>Action 处理器，处理异步动作，基于 Redux-saga 实现。Effect 指的是副作用。根据函数式编程，计算以外的操作都属于Effect，典型的就是 I/O 操作、数据库读写。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">addAfter1Second</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token punctuation">{</span> put<span class="token punctuation">,</span> call <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'add\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="generator-函数"><a href="#generator-函数" aria-hidden="true" class="header-anchor">#</a> Generator 函数</h2> <p>Effect 是一个 Generator 函数，内部使用 yield 关键字，标识每一步的操作（不管是异步或同步）。</p> <h2 id="call-和-put"><a href="#call-和-put" aria-hidden="true" class="header-anchor">#</a> call 和 put</h2> <p>dva提供多个 effect 函数内部的处理函数，比较常用的是 <code>call</code> 和 <code>put</code>。</p> <ul><li>call：执行异步函数</li> <li>put：发出一个 Action，类似于 dispatch</li></ul> <h2 id="课堂实战"><a href="#课堂实战" aria-hidden="true" class="header-anchor">#</a> 课堂实战</h2> <p>写一个列表，包含删除按钮，点删除按钮后延迟 1 秒执行删除。</p> <img src="https://zos.alipayobjects.com/rmsportal/qEVcuGVcKMGjlUNghHel.gif"></div> <div class="page-edit"><div class="edit-link"><a href="https://github.com/dvajs/dva/edit/master/docs/guide/introduce-class.md" target="_blank" rel="noopener noreferrer">在 GitHub 上编辑此页</a> <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></div> <div class="last-updated"><span class="prefix">Last Updated: </span> <span class="time">9/5/2018, 1:47:03 PM</span></div></div> <divclass="page-nav"><p class="inner"><span class="prev">\n        ←\n        <a href="/guide/concepts.html" class="prev">\n          Dva 概念\n        </a></span><span class="next"><a href="/guide/fig-show.html">\n          Dva 图解\n       </a>\n        →\n      </span></p></div> </div> <!----></div></div>\n    <script src="/assets/js/14.e84ae03a.js" defer></script><script src="/assets/js/app.dc321897.js" defer></script>\n  </body>\n</html>\n' },
_resBuffered: true,
response: [Circular],
called: true },
req:
ClientRequest {
_events:
{ drain: [Function],
error: [Function],
prefinish: [Function: requestOnPrefinish] },
_eventsCount: 3,
_maxListeners: undefined,
output: [],
outputEncodings: [],
outputCallbacks: [],
outputSize: 0,
writable: true,
_last: true,
chunkedEncoding: false,
shouldKeepAlive: false,
useChunkedEncodingByDefault: false,
sendDate: false,
_removedConnection: false,
_removedContLen: false,
_removedTE: false,
_contentLength: 0,
_hasBody: true,
_trailer: '',
finished: true,
_headerSent: true,
socket:
TLSSocket {
_tlsOptions: [Object],
_secureEstablished: true,
_securePending: false,
_newSessionPending: false,
_controlReleased: true,
_SNICallback: null,
servername: 'dvajs.com',
alpnProtocol: false,
authorized: true,
authorizationError: null,
encrypted: true,
_events: [Object],
_eventsCount: 7,
connecting: false,
_hadError: false,
_handle: null,
_parent: null,
_host: 'dvajs.com',
_readableState: [ReadableState],
readable: false,
_maxListeners: undefined,
_writableState: [WritableState],
writable: false,
allowHalfOpen: false,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: undefined,
_server: null,
ssl: null,
_requestCert: true,
_rejectUnauthorized: true,
parser: null,
_httpMessage: [Circular],
write: [Function: writeAfterFIN],
[Symbol(res)]: null,
[Symbol(asyncId)]: 37,
[Symbol(lastWriteQueueSize)]: 0,
[Symbol(timeout)]: null,
[Symbol(kBytesRead)]: 7289,
[Symbol(kBytesWritten)]: 147,
[Symbol(connect-options)]: [Object] },
connection:
TLSSocket {
_tlsOptions: [Object],
_secureEstablished: true,
_securePending: false,
_newSessionPending: false,
_controlReleased: true,
_SNICallback: null,
servername: 'dvajs.com',
alpnProtocol: false,
authorized: true,
authorizationError: null,
encrypted: true,
_events: [Object],
_eventsCount: 7,
connecting: false,
_hadError: false,
_handle: null,
_parent: null,
_host: 'dvajs.com',
_readableState: [ReadableState],
readable: false,
_maxListeners: undefined,
_writableState: [WritableState],
writable: false,
allowHalfOpen: false,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: undefined,
_server: null,
ssl: null,
_requestCert: true,
_rejectUnauthorized: true,
parser: null,
_httpMessage: [Circular],
write: [Function: writeAfterFIN],
[Symbol(res)]: null,
[Symbol(asyncId)]: 37,
[Symbol(lastWriteQueueSize)]: 0,
[Symbol(timeout)]: null,
[Symbol(kBytesRead)]: 7289,
[Symbol(kBytesWritten)]: 147,
[Symbol(connect-options)]: [Object] },
_header:
'GET /guide/introduce-class.html HTTP/1.1\r\nHost: dvajs.com\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/4.1.0\r\nConnection: close\r\n\r\n',
_onPendingData: [Function: noopPendingOutput],
agent:
Agent {
_events: [Object],
_eventsCount: 1,
_maxListeners: undefined,
defaultPort: 443,
protocol: 'https:',
options: [Object],
requests: {},
sockets: {},
freeSockets: {},
keepAliveMsecs: 1000,
keepAlive: false,
maxSockets: Infinity,
maxFreeSockets: 256,
maxCachedSessions: 100,
_sessionCache: [Object] },
socketPath: undefined,
timeout: undefined,
method: 'GET',
path: '/guide/introduce-class.html',
_ended: true,
res:
IncomingMessage {
_readableState: [ReadableState],
readable: false,
_events: [Object],
_eventsCount: 3,
_maxListeners: undefined,
socket: [TLSSocket],
connection: [TLSSocket],
httpVersionMajor: 1,
httpVersionMinor: 1,
httpVersion: '1.1',
complete: true,
headers: [Object],
rawHeaders: [Array],
trailers: {},
rawTrailers: [],
aborted: false,
upgrade: false,
url: '',
method: null,
statusCode: 200,
statusMessage: 'OK',
client: [TLSSocket],
_consuming: true,
_dumped: false,
req: [Circular],
setEncoding: [Function],
on: [Function],
text:
'<!DOCTYPE html>\n<html lang="en-US">\n  <head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width,initial-scale=1">\n   <title>入门课 | DvaJS</title>\n    <meta name="description" content="React and redux based, lightweight and elm-style framework.">\n    \n    \n    <link rel="preload" href="/assets/css/0.styles.b8709ccd.css" as="style"><link rel="preload" href="/assets/js/app.dc321897.js" as="script"><link rel="preload" href="/assets/js/14.e84ae03a.js" as="script"><link rel="prefetch" href="/assets/js/10.5135f8ee.js"><link rel="prefetch" href="/assets/js/11.e8b382d8.js"><link rel="prefetch" href="/assets/js/12.386d0bf0.js"><link rel="prefetch" href="/assets/js/13.6bd02bb1.js"><link rel="prefetch" href="/assets/js/15.8efcad4a.js"><link rel="prefetch" href="/assets/js/16.d788ea92.js"><link rel="prefetch" href="/assets/js/17.4425fd00.js"><link rel="prefetch" href="/assets/js/2.0629f971.js"><link rel="prefetch" href="/assets/js/3.aeb3be87.js"><link rel="prefetch" href="/assets/js/4.76994986.js"><link rel="prefetch" href="/assets/js/5.5da63f73.js"><link rel="prefetch" href="/assets/js/6.ad6d1a78.js"><link rel="prefetch" href="/assets/js/7.1dfa7f05.js"><link rel="prefetch" href="/assets/js/8.34844fc7.js"><link rel="prefetch" href="/assets/js/9.099d0481.js">\n    <link rel="stylesheet" href="/assets/css/0.styles.b8709ccd.css">\n  </head>\n  <body>\n    <div id="app" data-server-rendered="true"><div class="theme-container"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="/" class="home-link router-link-active"><!----> <span class="site-name">DvaJS</span></a> <div class="links" style="max-width:nullpx;"><div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div> <nav class="nav-links can-hide"><div class="nav-item"><a href="/guide/" class="nav-link router-link-active">指南</a></div><div class="nav-item"><a href="/api/" class="nav-link">API</a></div><div class="nav-item"><a href="/knowledgemap/" class="nav-link">知识地图</a></div><div class="nav-item"><a href="https://github.com/dvajs/dva/releases" target="_blank" rel="noopener noreferrer" class="nav-link external">\n  发布日志\n  <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.962.8,22.9 71.5,22.9"></polygon></svg></a></div> <a href="https://github.com/dvajs/dva" target="_blank" rel="noopener noreferrer" class="repo-link">\n    GitHub\n    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px"viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></nav></div></header> <div class="sidebar-mask"></div> <div class="sidebar"><nav class="nav-links"><div class="nav-item"><a href="/guide/" class="nav-link router-link-active">指南</a></div><div class="nav-item"><a href="/api/" class="nav-link">API</a></div><div class="nav-item"><a href="/knowledgemap/" class="nav-link">知识地图</a></div><div class="nav-item"><a href="https://github.com/dvajs/dva/releases" target="_blank" rel="noopener noreferrer" class="nav-link external">\n  发布日志\n  <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100"width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></div> <a href="https://github.com/dvajs/dva" target="_blank" rel="noopener noreferrer" class="repo-link">\n    GitHub\n    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0100 100" width="15" height="15" class="icon outbound"><path fill="currentColor"d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></nav>  <ul class="sidebar-links"><li><divclass="sidebar-group first"><p class="sidebar-heading open"><span>指南</span> <!----></p> <ul class="sidebar-group-items"><li><a href="/guide/" class="sidebar-link">介绍</a></li><li><a href="/guide/getting-started.html" class="sidebar-link">快速上手</a></li><li><a href="/guide/examples-and-boilerplates.html" class="sidebar-link">例子和脚手架</a></li><li><a href="/guide/concepts.html" class="sidebar-link">Dva 概念</a></li><li><a href="/guide/introduce-class.html" class="active sidebar-link">入门课</a><ul class="sidebar-sub-headers"><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#react-没有解决的问题" class="sidebar-link">React 没有解决的问题</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#通信问题" class="sidebar-link">通信问题</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#组件通信的例子" class="sidebar-link">组件通信的例子</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流问题" class="sidebar-link">数据流问题</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#目前最流行的数据流方案" class="sidebar-link">目前最流行的数据流方案</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dva-是什么" class="sidebar-link">dva 是什么</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dva-应用的最简结构" class="sidebar-link">dva 应用的最简结构</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流图"class="sidebar-link">数据流图</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#核心概念" class="sidebar-link">核心概念</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#state-和-view" class="sidebar-link">State 和 View</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#action" class="sidebar-link">Action</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#connect-方法" class="sidebar-link">connect 方法</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dispatch-方法" class="sidebar-link">dispatch 方法</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dva-应用的最简结构（带-model" class="sidebar-link">dva 应用的最简结构（带 model)</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流图-1" class="sidebar-link">数据流图 1</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流图-2" class="sidebar-link">数据流图 2</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#app-model" class="sidebar-link">app.model</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#model-对象的例子" class="sidebar-link">Model 对象的例子</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#model-对象的属性" class="sidebar-link">Model 对象的属性</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#reducer" class="sidebar-link">Reducer</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#effect" class="sidebar-link">Effect</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#generator-函数" class="sidebar-link">Generator 函数</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#call-和-put" class="sidebar-link">call 和 put</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#课堂实战" class="sidebar-link">课堂实战</a></li></ul></li></ul></div></li><li><div class="sidebar-group"><p class="sidebar-heading"><span>社区</span> <!----></p> <ul class="sidebar-group-items"><li><a href="/guide/fig-show.html" class="sidebar-link">Dva 图解</a></li><li><a href="/guide/develop-complex-spa.html" class="sidebar-link">使用 Dva 开发复杂 SPA</a></li><li><a href="/guide/source-code-explore.html" class="sidebar-link">Dva源码解析</a></li></ul></div></li></ul> </div> <div class="page"> <div class="content"><h1 id="入门课"><a href="#入门课" aria-hidden="true" class="header-anchor">#</a> 入门课</h1> <div class="tip custom-block"><p class="custom-block-title">TIP</p> <p>内容来自之前为内部同学准备的入门课。</p></div> <h2 id="react-没有解决的问题"><a href="#react-没有解决的问题" aria-hidden="true" class="header-anchor">#</a> React 没有解决的问题</h2> <p>React 本身只是一个 DOM 的抽象层，使用组件构建虚拟 DOM。</p> <p>如果开发大应用，还需要解决一个问题。</p> <ul><li>通信：组件之间如何通信？</li> <li>数据流：数据如何和视图串联起来？路由和数据如何绑定？如何编写异步逻辑？等等</li></ul> <h2 id="通信问题"><a href="#通信问题" aria-hidden="true" class="header-anchor">#</a> 通信问题</h2> <p>组件会发生三种通信。</p> <ul><li>向子组件发消息</li> <li>向父组件发消息</li> <li>向其他组件发消息</li></ul> <p>React 只提供了一种通信手段：传参。对于大应用，很不方便。</p> <h2 id="组件通信的例子"><a href="#组件通信的例子" aria-hidden="true" class="header-anchor">#</a> 组件通信的例子</h2> <h3 id="步骤1"><a href="#步骤1" aria-hidden="true" class="header-anchor">#</a> 步骤1</h3> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>input<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="tokenpunctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <spanclass="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>Son<span class="token operator">/</span><span class="token operator">&gt;</span>\n     <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>这里显示 Son 组件的内容<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Father<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>看这个例子，想一想父组件如何拿到子组件的值。</p> <h3 id="步骤2"><a href="#步骤2" aria-hidden="true" class="header-anchor">#</a> 步骤2</h3> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>onChange<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      son<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">changeHandler</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      son<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>Son onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>这里显示 Son 组件的内容：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>son<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Father<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>看下这个例子，看懂源码，理解子组件如何通过父组件传入的函数，将自己的值再传回父组件。</p> <h2 id="数据流问题"><a href="#数据流问题" aria-hidden="true" class="header-anchor">#</a> 数据流问题</h2> <p>目前流行的数据流方案有：</p> <ul><li>Flux，单向数据流方案，以 <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener noreferrer">Redux<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 为代表</li> <li>Reactive，响应式数据流方案，以 <a href="https://github.com/mobxjs/mobx" target="_blank" rel="noopener noreferrer">Mobx<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 为代表</li> <li>其他，比如 rxjs 等</li></ul> <p>到底哪一种架构最合适 React ？</p> <h2 id="目前最流行的数据流方案"><a href="#目前最流行的数据流方案" aria-hidden="true" class="header-anchor">#</a> 目前最流行的数据流方案</h2> <p>截止 2017.1，最流行的社区 React 应用架构方案如下。</p> <ul><li>路由： <a href="https://github.com/ReactTraining/react-router/tree/v2.8.1" target="_blank" rel="noopener noreferrer">React-Router<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li> <li>架构： <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener noreferrer">Redux<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li> <li>异步操作： <a href="https://github.com/yelouafi/redux-saga" target="_blank" rel="noopener noreferrer">Redux-saga<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li></ul> <p>缺点：要引入多个库，项目结构复杂。</p> <h2 id="dva-是什么"><a href="#dva-是什么" aria-hidden="true" class="header-anchor">#</a> dva 是什么</h2> <p>dva 是体验技术部开发的 React 应用框架，将上面三个 React 工具库包装在一起，简化了 API，让开发 React 应用更加方便和快捷。</p> <p>dva = React-Router + Redux + Redux-saga</p> <h2 id="dva-应用的最简结构"><a href="#dva-应用的最简结构" aria-hidden="true" class="header-anchor">#</a> dva 应用的最简结构</h2> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">import</span> dva <span class="token keyword">from</span> <span class="token string">\'dva\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <spanclass="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Hello dva<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建应用</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="tokenpunctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 注册视图</span>\napp<span class="token punctuation">.</span><spanclass="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 启动应用</span>\napp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="数据流图"><a href="#数据流图" aria-hidden="true" class="header-anchor">#</a> 数据流图</h2> <img src="https://zos.alipayobjects.com/rmsportal/hUFIivoOFjVmwNXjjfPE.png" width="460" height="290"> <h2 id="核心概念"><a href="#核心概念" aria-hidden="true" class="header-anchor">#</a> 核心概念</h2> <ul><li>State：一个对象，保存整个应用状态</li> <li>View：React 组件构成的视图层</li> <li>Action：一个对象，描述事件</li> <li>connect 方法：一个函数，绑定 State 到 View</li> <li>dispatch 方法：一个函数，发送 Action 到 State</li></ul> <h2 id="state-和-view"><a href="#state-和-view" aria-hidden="true" class="header-anchor">#</a> State 和 View</h2> <p>State 是储存数据的地方，收到 Action 以后，会更新数据。</p> <p>View 就是 React 组件构成的 UI 层，从 State 取数据后，渲染成 HTML 代码。只要 State 有变化，View 就会自动更新。</p> <h2 id="action"><a href="#action" aria-hidden="true" class="header-anchor">#</a> Action</h2> <p>Action 是用来描述 UI 层事件的一个对象。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'click-submit-button\'</span><span class="tokenpunctuation">,</span>\n  payload<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>data\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="connect-方法"><a href="#connect-方法" aria-hidden="true" class="header-anchor">#</a> connect 方法</h2> <p>connect 是一个函数，绑定 State 到 View。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'dva\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> todos<span class="token punctuation">:</span> state<span class="token punctuation">.</span>todos <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>connect 方法返回的也是一个 React 组件，通常称为容器组件。因为它是原始 UI 组件的容器，即在外面包了一层 State。</p> <p>connect 方法传入的第一个参数是 mapStateToProps  函数，mapStateToProps 函数会返回一个对象，用于建立 State 到 Props 的映射关系。</p> <h2 id="dispatch-方法"><a href="#dispatch-方法" aria-hidden="true" class="header-anchor">#</a> dispatch 方法</h2> <p>dispatch 是一个函数方法，用来将 Action 发送给 State。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'click-submit-button\'</span><span class="token punctuation">,</span>\n  payload<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>data\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>dispatch 方法从哪里来？被 connect 的 Component 会自动在 props 中拥有 dispatch 方法。</p> <blockquote><p>connect 的数据从哪里来?</p></blockquote> <h2 id="dva-应用的最简结构（带-model"><a href="#dva-应用的最简结构（带-model" aria-hidden="true" class="header-anchor">#</a> dva 应用的最简结构（带 model)</h2> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// 创建应用</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 注册 Model</span>\napp<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  namespace<span class="token punctuation">:</span> <span class="token string">\'count\'</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  reducers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  effects<spanclass="token punctuation">:</span> <span class="token punctuation">{</span>\n   <span class="token operator">*</span><span class="token function">addAfter1Second</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="tokenpunctuation">,</span> put <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'add\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 注册视图</span>\napp<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>ConnectedApp <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 启动应用</span>\napp<span class="token punctuation">.</span><span class="token function">start</span><spanclass="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="数据流图-1"><a href="#数据流图-1" aria-hidden="true" class="header-anchor">#</a> 数据流图 1</h2> <img src="https://zos.alipayobjects.com/rmsportal/cyzvnIrRhJGOiLliwhcZ.png" width="450" height="380"> <h2 id="数据流图-2"><a href="#数据流图-2" aria-hidden="true" class="header-anchor">#</a> 数据流图 2</h2> <img src="https://zos.alipayobjects.com/rmsportal/pHTYrKJxQHPyJGAYOzMu.png" width="607" height="464"> <h2 id="app-model"><a href="#app-model" aria-hidden="true" class="header-anchor">#</a> app.model</h2> <p>dva 提供 app.model 这个对象，所有的应用逻辑都定义在它上面。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 新增这一行</span>\napp<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/**/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="tokenpunctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><spanclass="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="model-对象的例子"><a href="#model-对象的例子" aria-hidden="true" class="header-anchor">#</a> Model 对象的例子</h2> <div class="language-js extra-class"><pre class="language-js"><code><span class="token punctuation">{</span>\n  namespace<span class="token punctuation">:</span> <span class="token string">\'count\'</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  reducers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  effects<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">*</span><spanclass="token function">addAfter1Second</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'add\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="model-对象的属性"><a href="#model-对象的属性" aria-hidden="true" class="header-anchor">#</a> Model 对象的属性</h2> <ul><li>namespace: 当前 Model 的名称。整个应用的 State，由多个小的 Model 的 State 以 namespace 为 key 合成</li> <li>state: 该 Model 当前的状态。数据保存在这里，直接决定了视图层的输出</li> <li>reducers: Action 处理器，处理同步动作，用来算出最新的 State</li> <li>effects：Action 处理器，处理异步动作</li></ul> <h2 id="reducer"><a href="#reducer" aria-hidden="true" class="header-anchor">#</a>Reducer</h2> <p>Reducer 是 Action 处理器，用来处理同步操作，可以看做是 state 的计算器。它的作用是根据 Action，从上一个 State 算出当前 State。</p> <p>一些例子：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// count +1</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 往 [] 里添加一个新 todo</span>\n<span class="token keyword">function</span> <span class="token function">addTodo</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="tokenkeyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">,</span> action<spanclass="token punctuation">.</span>payload<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 往 { todos: [], loading: true } 里添加一个新 todo，并标记 loading 为 false</span>\n<span class="token keyword">function</span> <span class="token function">addTodo</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>state<span class="token punctuation">,</span>\n   todos<span class="token punctuation">:</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><spanclass="token punctuation">,</span>\n    loading<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="effect"><a href="#effect" aria-hidden="true" class="header-anchor">#</a> Effect</h2> <p>Action 处理器，处理异步动作，基于 Redux-saga 实现。Effect 指的是副作用。根据函数式编程，计算以外的操作都属于Effect，典型的就是 I/O 操作、数据库读写。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">addAfter1Second</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token punctuation">{</span> put<span class="token punctuation">,</span> call <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'add\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="generator-函数"><a href="#generator-函数" aria-hidden="true" class="header-anchor">#</a> Generator 函数</h2> <p>Effect 是一个 Generator 函数，内部使用 yield 关键字，标识每一步的操作（不管是异步或同步）。</p> <h2 id="call-和-put"><a href="#call-和-put" aria-hidden="true" class="header-anchor">#</a> call 和 put</h2> <p>dva提供多个 effect 函数内部的处理函数，比较常用的是 <code>call</code> 和 <code>put</code>。</p> <ul><li>call：执行异步函数</li> <li>put：发出一个 Action，类似于 dispatch</li></ul> <h2 id="课堂实战"><a href="#课堂实战" aria-hidden="true" class="header-anchor">#</a> 课堂实战</h2> <p>写一个列表，包含删除按钮，点删除按钮后延迟 1 秒执行删除。</p> <img src="https://zos.alipayobjects.com/rmsportal/qEVcuGVcKMGjlUNghHel.gif"></div> <div class="page-edit"><div class="edit-link"><a href="https://github.com/dvajs/dva/edit/master/docs/guide/introduce-class.md" target="_blank" rel="noopener noreferrer">在 GitHub 上编辑此页</a> <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></div> <div class="last-updated"><span class="prefix">Last Updated: </span> <span class="time">9/5/2018, 1:47:03 PM</span></div></div> <divclass="page-nav"><p class="inner"><span class="prev">\n        ←\n        <a href="/guide/concepts.html" class="prev">\n          Dva 概念\n        </a></span><span class="next"><a href="/guide/fig-show.html">\n          Dva 图解\n       </a>\n        →\n      </span></p></div> </div> <!----></div></div>\n    <script src="/assets/js/14.e84ae03a.js" defer></script><script src="/assets/js/app.dc321897.js" defer></script>\n  </body>\n</html>\n' },
aborted: undefined,
timeoutCb: null,
upgradeOrConnect: false,
parser: null,
maxHeadersCount: null,
[Symbol(isCorked)]: false,
[Symbol(outHeadersKey)]:
{ host: [Array],
'accept-encoding': [Array],
'user-agent': [Array] } },
text:
'<!DOCTYPE html>\n<html lang="en-US">\n  <head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width,initial-scale=1">\n    <title>入门课 | DvaJS</title>\n    <meta name="description" content="React and redux based, lightweight and elm-style framework.">\n    \n    \n    <link rel="preload" href="/assets/css/0.styles.b8709ccd.css" as="style"><link rel="preload" href="/assets/js/app.dc321897.js" as="script"><link rel="preload" href="/assets/js/14.e84ae03a.js" as="script"><link rel="prefetch" href="/assets/js/10.5135f8ee.js"><link rel="prefetch" href="/assets/js/11.e8b382d8.js"><link rel="prefetch" href="/assets/js/12.386d0bf0.js"><link rel="prefetch" href="/assets/js/13.6bd02bb1.js"><link rel="prefetch" href="/assets/js/15.8efcad4a.js"><link rel="prefetch" href="/assets/js/16.d788ea92.js"><link rel="prefetch" href="/assets/js/17.4425fd00.js"><link rel="prefetch" href="/assets/js/2.0629f971.js"><link rel="prefetch"href="/assets/js/3.aeb3be87.js"><link rel="prefetch" href="/assets/js/4.76994986.js"><link rel="prefetch" href="/assets/js/5.5da63f73.js"><link rel="prefetch" href="/assets/js/6.ad6d1a78.js"><link rel="prefetch" href="/assets/js/7.1dfa7f05.js"><link rel="prefetch" href="/assets/js/8.34844fc7.js"><link rel="prefetch" href="/assets/js/9.099d0481.js">\n    <link rel="stylesheet" href="/assets/css/0.styles.b8709ccd.css">\n  </head>\n  <body>\n    <div id="app" data-server-rendered="true"><div class="theme-container"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="/" class="home-link router-link-active"><!----> <span class="site-name">DvaJS</span></a> <div class="links" style="max-width:nullpx;"><div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div> <nav class="nav-links can-hide"><div class="nav-item"><a href="/guide/" class="nav-link router-link-active">指南</a></div><div class="nav-item"><a href="/api/" class="nav-link">API</a></div><div class="nav-item"><a href="/knowledgemap/" class="nav-link">知识地图</a></div><div class="nav-item"><a href="https://github.com/dvajs/dva/releases" target="_blank" rel="noopener noreferrer" class="nav-link external">\n  发布日志\n  <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></div> <a href="https://github.com/dvajs/dva" target="_blank" rel="noopener noreferrer" class="repo-link">\n    GitHub\n    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></nav></div></header> <div class="sidebar-mask"></div> <div class="sidebar"><nav class="nav-links"><div class="nav-item"><a href="/guide/" class="nav-link router-link-active">指南</a></div><div class="nav-item"><a href="/api/" class="nav-link">API</a></div><div class="nav-item"><a href="/knowledgemap/" class="nav-link">知识地图</a></div><div class="nav-item"><a href="https://github.com/dvajs/dva/releases" target="_blank" rel="noopener noreferrer" class="nav-link external">\n  发布日志\n  <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></div> <a href="https://github.com/dvajs/dva" target="_blank" rel="noopener noreferrer" class="repo-link">\n    GitHub\n    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.971.5,22.9"></polygon></svg></a></nav>  <ul class="sidebar-links"><li><div class="sidebar-group first"><p class="sidebar-heading open"><span>指南</span> <!----></p> <ul class="sidebar-group-items"><li><a href="/guide/" class="sidebar-link">介绍</a></li><li><a href="/guide/getting-started.html" class="sidebar-link">快速上手</a></li><li><a href="/guide/examples-and-boilerplates.html" class="sidebar-link">例子和脚手架</a></li><li><a href="/guide/concepts.html" class="sidebar-link">Dva 概念</a></li><li><a href="/guide/introduce-class.html" class="active sidebar-link">入门课</a><ul class="sidebar-sub-headers"><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#react-没有解决的问题" class="sidebar-link">React 没有解决的问题</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#通信问题" class="sidebar-link">通信问题</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#组件通信的例子" class="sidebar-link">组件通信的例子</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流问题" class="sidebar-link">数据流问题</a></li><liclass="sidebar-sub-header"><a href="/guide/introduce-class.html#目前最流行的数据流方案" class="sidebar-link">目前最流行的数据流方案</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dva-是什么" class="sidebar-link">dva 是什么</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dva-应用的最简结构" class="sidebar-link">dva 应用的最简结构</a></li><liclass="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流图" class="sidebar-link">数据流图</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#核心概念" class="sidebar-link">核心概念</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#state-和-view" class="sidebar-link">State 和 View</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#action" class="sidebar-link">Action</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#connect-方法" class="sidebar-link">connect 方法</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#dispatch-方法" class="sidebar-link">dispatch 方法</a></li><liclass="sidebar-sub-header"><a href="/guide/introduce-class.html#dva-应用的最简结构（带-model" class="sidebar-link">dva 应用的最简结构（带 model)</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流图-1" class="sidebar-link">数据流图 1</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#数据流图-2" class="sidebar-link">数据流图 2</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#app-model" class="sidebar-link">app.model</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#model-对象的例子" class="sidebar-link">Model 对象的例子</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#model-对象的属性" class="sidebar-link">Model 对象的属性</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#reducer" class="sidebar-link">Reducer</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#effect" class="sidebar-link">Effect</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#generator-函数" class="sidebar-link">Generator 函数</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#call-和-put" class="sidebar-link">call 和 put</a></li><li class="sidebar-sub-header"><a href="/guide/introduce-class.html#课堂实战" class="sidebar-link">课堂实战</a></li></ul></li></ul></div></li><li><div class="sidebar-group"><p class="sidebar-heading"><span>社区</span> <!----></p> <ul class="sidebar-group-items"><li><a href="/guide/fig-show.html" class="sidebar-link">Dva 图解</a></li><li><a href="/guide/develop-complex-spa.html" class="sidebar-link">使用 Dva 开发复杂 SPA</a></li><li><a href="/guide/source-code-explore.html" class="sidebar-link">Dva 源码解析</a></li></ul></div></li></ul> </div> <div class="page"> <div class="content"><h1 id="入门课"><a href="#入门课" aria-hidden="true" class="header-anchor">#</a> 入门课</h1> <div class="tip custom-block"><p class="custom-block-title">TIP</p> <p>内容来自之前为内部同学准备的入门课。</p></div> <h2 id="react-没有解决的问题"><a href="#react-没有解决的问题" aria-hidden="true" class="header-anchor">#</a> React 没有解决的问题</h2> <p>React 本身只是一个 DOM 的抽象层，使用组件构建虚拟 DOM。</p> <p>如果开发大应用，还需要解决一个问题。</p> <ul><li>通信：组件之间如何通信？</li> <li>数据流：数据如何和视图串联起来？路由和数据如何绑定？如何编写异步逻辑？等等</li></ul> <h2 id="通信问题"><a href="#通信问题" aria-hidden="true" class="header-anchor">#</a> 通信问题</h2> <p>组件会发生三种通信。</p> <ul><li>向子组件发消息</li> <li>向父组件发消息</li> <li>向其他组件发消息</li></ul> <p>React 只提供了一种通信手段：传参。对于大应用，很不方便。</p> <h2 id="组件通信的例子"><a href="#组件通信的例子" aria-hidden="true" class="header-anchor">#</a> 组件通信的例子</h2> <h3 id="步骤1"><a href="#步骤1" aria-hidden="true" class="header-anchor">#</a> 步骤1</h3> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>input<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>Son<span class="token operator">/</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>这里显示 Son 组件的内容<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Father<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>看这个例子，想一想父组件如何拿到子组件的值。</p> <h3 id="步骤2"><a href="#步骤2" aria-hidden="true" class="header-anchor">#</a> 步骤2</h3> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <spanclass="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>onChange<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      son<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">changeHandler</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      son<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>SononChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeHandler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>这里显示 Son 组件的内容：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>son<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Father<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>看下这个例子，看懂源码，理解子组件如何通过父组件传入的函数，将自己的值再传回父组件。</p> <h2 id="数据流问题"><a href="#数据流问题" aria-hidden="true" class="header-anchor">#</a> 数据流问题</h2> <p>目前流行的数据流方案有：</p> <ul><li>Flux，单向数据流方案，以 <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener noreferrer">Redux<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 为代表</li> <li>Reactive，响应式数据流方案，以 <a href="https://github.com/mobxjs/mobx" target="_blank" rel="noopener noreferrer">Mobx<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 为代表</li> <li>其他，比如 rxjs 等</li></ul> <p>到底哪一种架构最合适React ？</p> <h2 id="目前最流行的数据流方案"><a href="#目前最流行的数据流方案" aria-hidden="true" class="header-anchor">#</a> 目前最流行的数据流方案</h2> <p>截止 2017.1，最流行的社区 React 应用架构方案如下。</p> <ul><li>路由： <a href="https://github.com/ReactTraining/react-router/tree/v2.8.1" target="_blank" rel="noopener noreferrer">React-Router<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li> <li>架构： <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener noreferrer">Redux<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li> <li>异步操作： <a href="https://github.com/yelouafi/redux-saga" target="_blank" rel="noopener noreferrer">Redux-saga<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li></ul> <p>缺点：要引入多个库，项目结构复杂。</p> <h2 id="dva-是什么"><a href="#dva-是什么" aria-hidden="true" class="header-anchor">#</a> dva 是什么</h2> <p>dva是体验技术部开发的 React 应用框架，将上面三个 React 工具库包装在一起，简化了 API，让开发 React 应用更加方便和快捷。</p> <p>dva = React-Router + Redux + Redux-saga</p> <h2 id="dva-应用的最简结构"><a href="#dva-应用的最简结构" aria-hidden="true" class="header-anchor">#</a> dva 应用的最简结构</h2> <div class="language-jsextra-class"><pre class="language-js"><code><span class="token keyword">import</span> dva <span class="token keyword">from</span> <span class="token string">\'dva\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Hello dva<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建应用</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="tokencomment">// 注册视图</span>\napp<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><spanclass="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 启动应用</span>\napp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2id="数据流图"><a href="#数据流图" aria-hidden="true" class="header-anchor">#</a> 数据流图</h2> <img src="https://zos.alipayobjects.com/rmsportal/hUFIivoOFjVmwNXjjfPE.png" width="460" height="290"> <h2 id="核心概念"><a href="#核心概念" aria-hidden="true" class="header-anchor">#</a> 核心概念</h2> <ul><li>State：一个对象，保存整个应用状态</li> <li>View：React 组件构成的视图层</li> <li>Action：一个对象，描述事件</li> <li>connect 方法：一个函数，绑定 State 到 View</li> <li>dispatch 方法：一个函数，发送 Action 到 State</li></ul> <h2 id="state-和-view"><a href="#state-和-view" aria-hidden="true" class="header-anchor">#</a> State 和 View</h2> <p>State 是储存数据的地方，收到 Action 以后，会更新数据。</p> <p>View 就是 React 组件构成的 UI 层，从 State 取数据后，渲染成 HTML 代码。只要 State 有变化，View 就会自动更新。</p> <h2 id="action"><a href="#action" aria-hidden="true" class="header-anchor">#</a> Action</h2> <p>Action 是用来描述 UI 层事件的一个对象。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span><span class="token string">\'click-submit-button\'</span><span class="token punctuation">,</span>\n  payload<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>data\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="connect-方法"><a href="#connect-方法" aria-hidden="true" class="header-anchor">#</a> connect 方法</h2> <p>connect 是一个函数，绑定 State 到 View。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'dva\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> todos<span class="token punctuation">:</span> state<span class="token punctuation">.</span>todos <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>connect 方法返回的也是一个 React 组件，通常称为容器组件。因为它是原始 UI 组件的容器，即在外面包了一层 State。</p> <p>connect 方法传入的第一个参数是 mapStateToProps  函数，mapStateToProps 函数会返回一个对象，用于建立 State 到 Props 的映射关系。</p> <h2 id="dispatch-方法"><a href="#dispatch-方法" aria-hidden="true" class="header-anchor">#</a> dispatch 方法</h2> <p>dispatch 是一个函数方法，用来将 Action 发送给 State。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="tokenstring">\'click-submit-button\'</span><span class="token punctuation">,</span>\n  payload<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>data\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>dispatch 方法从哪里来？被 connect 的Component 会自动在 props 中拥有 dispatch 方法。</p> <blockquote><p>connect 的数据从哪里来?</p></blockquote> <h2 id="dva-应用的最简结构（带-model"><a href="#dva-应用的最简结构（带-model" aria-hidden="true" class="header-anchor">#</a> dva 应用的最简结构（带 model)</h2> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// 创建应用</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 注册 Model</span>\napp<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  namespace<span class="token punctuation">:</span> <span class="token string">\'count\'</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  reducers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  effects<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">*</span><span class="token function">addAfter1Second</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put <span class="token punctuation">}</span><span class="tokenpunctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'add\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="tokenpunctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 注册视图</span>\napp<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>ConnectedApp <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 启动应用</span>\napp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="数据流图-1"><a href="#数据流图-1" aria-hidden="true" class="header-anchor">#</a> 数据流图 1</h2> <img src="https://zos.alipayobjects.com/rmsportal/cyzvnIrRhJGOiLliwhcZ.png" width="450" height="380"> <h2 id="数据流图-2"><a href="#数据流图-2" aria-hidden="true" class="header-anchor">#</a> 数据流图 2</h2> <img src="https://zos.alipayobjects.com/rmsportal/pHTYrKJxQHPyJGAYOzMu.png" width="607" height="464"> <h2 id="app-model"><a href="#app-model" aria-hidden="true" class="header-anchor">#</a> app.model</h2> <p>dva 提供 app.model 这个对象，所有的应用逻辑都定义在它上面。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 新增这一行</span>\napp<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/**/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="model-对象的例子"><a href="#model-对象的例子" aria-hidden="true" class="header-anchor">#</a> Model 对象的例子</h2> <div class="language-js extra-class"><pre class="language-js"><code><span class="token punctuation">{</span>\n  namespace<span class="token punctuation">:</span> <span class="token string">\'count\'</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  reducers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  effects<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">*</span><span class="token function">addAfter1Second</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'add\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="model-对象的属性"><a href="#model-对象的属性" aria-hidden="true" class="header-anchor">#</a> Model 对象的属性</h2> <ul><li>namespace: 当前 Model 的名称。整个应用的 State，由多个小的 Model 的 State 以 namespace 为 key 合成</li> <li>state: 该 Model 当前的状态。数据保存在这里，直接决定了视图层的输出</li> <li>reducers: Action 处理器，处理同步动作，用来算出最新的 State</li> <li>effects：Action 处理器，处理异步动作</li></ul> <h2 id="reducer"><a href="#reducer" aria-hidden="true" class="header-anchor">#</a> Reducer</h2> <p>Reducer 是 Action 处理器，用来处理同步操作，可以看做是 state 的计算器。它的作用是根据 Action，从上一个 State 算出当前 State。</p> <p>一些例子：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// count +1</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 往 [] 里添加一个新 todo</span>\n<span class="token keyword">function</span> <span class="token function">addTodo</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">,</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 往 { todos: [], loading: true } 里添加一个新 todo，并标记 loading 为 false</span>\n<span class="token keyword">function</span> <span class="token function">addTodo</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>state<span class="token punctuation">,</span>\n    todos<span class="token punctuation">:</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    loading<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="effect"><a href="#effect" aria-hidden="true" class="header-anchor">#</a> Effect</h2> <p>Action 处理器，处理异步动作，基于 Redux-saga 实现。Effect 指的是副作用。根据函数式编程，计算以外的操作都属于 Effect，典型的就是 I/O 操作、数据库读写。</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">addAfter1Second</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token punctuation">{</span> put<span class="token punctuation">,</span> call <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'add\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="generator-函数"><a href="#generator-函数" aria-hidden="true" class="header-anchor">#</a> Generator 函数</h2> <p>Effect 是一个 Generator 函数，内部使用 yield 关键字，标识每一步的操作（不管是异步或同步）。</p> <h2 id="call-和-put"><a href="#call-和-put" aria-hidden="true" class="header-anchor">#</a> call 和 put</h2> <p>dva 提供多个 effect 函数内部的处理函数，比较常用的是 <code>call</code> 和 <code>put</code>。</p> <ul><li>call：执行异步函数</li> <li>put：发出一个 Action，类似于 dispatch</li></ul> <h2 id="课堂实战"><a href="#课堂实战" aria-hidden="true" class="header-anchor">#</a> 课堂实战</h2> <p>写一个列表，包含删除按钮，点删除按钮后延迟 1 秒执行删除。</p> <img src="https://zos.alipayobjects.com/rmsportal/qEVcuGVcKMGjlUNghHel.gif"></div> <div class="page-edit"><div class="edit-link"><a href="https://github.com/dvajs/dva/edit/master/docs/guide/introduce-class.md" target="_blank" rel="noopener noreferrer">在 GitHub 上编辑此页</a> <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15"height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></div> <div class="last-updated"><span class="prefix">Last Updated: </span> <span class="time">9/5/2018, 1:47:03 PM</span></div></div> <div class="page-nav"><p class="inner"><span class="prev">\n        ←\n        <a href="/guide/concepts.html" class="prev">\n          Dva 概念\n        </a></span> <span class="next"><a href="/guide/fig-show.html">\n          Dva 图解\n        </a>\n       →\n      </span></p></div> </div> <!----></div></div>\n    <script src="/assets/js/14.e84ae03a.js" defer></script><script src="/assets/js/app.dc321897.js" defer></script>\n  </body>\n</html>\n',
body: {},
files: undefined,
buffered: true,
headers:
{ date: 'Wed, 27 Feb 2019 03:06:41 GMT',
'content-type': 'text/html; charset=UTF-8',
'transfer-encoding': 'chunked',
connection: 'close',
'x-powered-by': 'Express',
'cache-control': 'public, max-age=60',
'last-modified': 'Thu, 29 Nov 2018 23:52:39 GMT',
etag: 'W/"a8ca-16761e38158"',
'x-now-trace': 'sfo1',
server: 'now',
now: '1',
'x-now-id': 'z42vq-1551236801856-dThyse6I4y04O7TGNbn3ai6e',
'x-now-instance': '2590811159',
'content-encoding': 'gzip' },
header:
{ date: 'Wed, 27 Feb 2019 03:06:41 GMT',
'content-type': 'text/html; charset=UTF-8',
'transfer-encoding': 'chunked',
connection: 'close',
'x-powered-by': 'Express',
'cache-control': 'public, max-age=60',
'last-modified': 'Thu, 29 Nov 2018 23:52:39 GMT',
etag: 'W/"a8ca-16761e38158"',
'x-now-trace': 'sfo1',
server: 'now',
now: '1',
'x-now-id': 'z42vq-1551236801856-dThyse6I4y04O7TGNbn3ai6e',
'x-now-instance': '2590811159',
'content-encoding': 'gzip' },
statusCode: 200,
status: 200,
statusType: 2,
info: false,
ok: true,
redirect: false,
clientError: false,
serverError: false,
error: false,
created: false,
accepted: false,
noContent: false,
badRequest: false,
unauthorized: false,
notAcceptable: false,
forbidden: false,
notFound: false,
unprocessableEntity: false,
type: 'text/html',
charset: 'UTF-8',
links: {},
setEncoding: [Function: bound ],
redirects: [],
pipe: [Function] }
